<?xml version="1.0"?>
       <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "xhtml11.dtd">
       <html xmlns="http://www.w3.org/1999/xhtml"
             xml:lang="en"><head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to Annick Vdp."></meta><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"></meta>


<!-- Modification Copyright (c) Michael Rottmeier, January 2004 -->
<!-- Find-it - Version 3.2b for Hot Potatoes v6 -->
<!-- css3_Facelift and recovered Keypad by stanbogdanov@yahoo.com, February 2013, http://ewbooks.info/hotpot -->
<!-- http://www.teaching-tools.de.vu -->
<!-- THIS HEADER MUST STAY UN-TOUCHED -->


<link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
<meta name="DC:Creator" content="Annick Vdp" />
<meta name="DC:Title" content="Luisteren: Tom stelt zich voor" />


<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /> 

<title>
Luisteren: Tom stelt zich voor
</title>

<!-- Made with executable version 6.3 Release 0 Build 5 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style type="text/css">


/* This is a modified CSS3 stylesheet for rounded corners of buttons,
the layout boxes and the input boxes in the exercise,
as well as dropshadows on buttons and draggable cards in JMix drag and drop */

   /* Modified by Stan Bogdanov - stanbogdanov@yahoo.com */
  /*  hp6.cs_            */ 
 /*  v1.5.2             */
/*  24 January 2013    */  

/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 6.3 Release 0 Build 5 */
/* Aanpassingen Annick:
	div.feedback: remove absolute positioning, add text-align left, padding 6px, change border-color, clear both
	remove shadows-shades
	change text-align left div.title, div.stdDiv
	change font-size ExerciseTitle
	div.stdDiv image margin and overflow 
	changes made to left and right container
	cardstyle z-index -1
	navbarstyle: no shade, colors
	COLORS ZWARTER 
		change strTitleColor to #09F to #3757f7
		change color ExerciseSubtitle to #333333
		background white body, stdDiv, feedback
		change strTextColor #333333, maar border-color #666
		change colors buttons
	WIDTH
		change width to 800px for div.feedback, div.titles, div.StdDiv, body
	TABLE
	    change table formatting jmatch (standard): left and rightitem: change padding

*/

/* Hack to hide a nested Quicktime player from IE, which can't handle it. */
* html object.MediaPlayerNotForIE {
	display: none;
}

body{
	font-family: Geneva,Arial;
	background-color: #FFF;
	color: #333333 ;
 
	margin-right: 1%;
	margin-left: 1%;
	font-size: small;
	width: 800px;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 100%;
}

table,div,span,td{
	font-size: 100%;
	color: #333333;
}

div.Titles{
	padding: 0.5em;;
	text-align: left;
	color: #3757f7;
	width: 800px;
}

button{
	font-family: Geneva,Arial;
	font-size: 100%;
	display: inline;
/* Stan_Rounded buttons */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 4px 17px;
	margin:2px;
/* Stan_Rounded buttons  END*/
}

button:link,
button:visited,
button:hover,
button:focus,
button:active {
	outline: none;
}


.ExerciseTitle{
	font-size: 150%;
	color: #3757f7;
}

.ExerciseSubtitle{
	font-size: 100%;
	color: #333333;
}

div.StdDiv{
	background-color: #fff;
	text-align: left;
	font-size: 100%;
	color: #333333;
	padding: 0.5em;
	border: 1px solid #ccc;
	margin-bottom: 1px;
	width: 800px;
	overflow: hidden;
/*Stan Rounded corners of layout boxes */	
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/*Stan Rounded corners of layout boxes */	
}

div.StdDiv img{
	margin-right: 10px;
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", Geneva,Arial; 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", Geneva,Arial; 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", Geneva,Arial;
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: #3757f7;

}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: #3757f7;
/* Stan  rounded corners of timer */	
 -khtml-border-radius: 10px;
 -moz-border-radius: 15px;
 -webkit-border-radius: 10px;
  border-radius: 10px;
  /* Stan  rounded corners of timer end */
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: #3757f7;
}

.LeftItem{
	font-size: 100%;
	color: #333333;
	text-align: left;
	padding: 2px 10px 2px 10px;
	background-color: #E0E0E0;
}

.RightItem{
	font-weight: bold;
	font-size: 100%;
	color: #333333;
	padding: 2px 10px 2px 2px;
}
#Questions td {
	min-width: 15px;
}

span.CorrectMark{
	
}


input, textarea{
	font-family: Verdana,Geneva,Arial,sans-serif;
	font-size: 100%;

/* Stan_rounded border of input boxes and textarea */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 5px;
	border:1px solid silver;
/* Stan_rounded border of input boxes and textarea END */
}

/* Stan_rounded focus border of input boxes and textarea */

input:focus, textarea:focus {
	outline: none; 
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 5px;
	border:1px solid silver;
/* Stan rounded focus border of input boxes and textarea end 8 December 2012 */	

	}
	
select{
	font-size: 100%;
	/* Stan - Rounded menu */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
	padding: 3px 2px 3px 5px;
	border: 1px solid silver;
/* Stan - Rounded menu END */
}

select:focus {
outline:none;
}

div.Feedback, #FeedbackDiv  {
	background-color: #fff;
	z-index: 105;
	border-style: solid;
	border-width: 1px;
	border-color: #CCC;
	padding: 6px;
	color: #3757f7;
	display: none;
	font-size: 100%;
	text-align: left;
	width: 800px;
	clear: both;
/* Stan_rounded border of feedback box */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/* Stan_rounded border of fixed box END */
}

.Feedbackmatch {
	position: absolute;
}




div.ExerciseDiv{
	color: #333333;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: #333333;
	border-color: #666;
	margin-left: 5%;
	margin-right: 5%;
	margin-top: 2em;
	margin-bottom: 2em;
	width: 90%;
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: #E0E0E0;
}
	

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: silver;
	color: #333333;
	background-color: #E0E0E0;
}

table.FlashcardTable td.Hidden{
	display: none;
}

table.FlashcardTable td {
	min-width:20px;
}

/* JMix styles */
div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: #333;
	padding: 10px;
	line-height: 1.5em;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: center;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: #3757f7;
	width: 800px;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 0em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: Geneva,Arial;
	font-size: 100%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: Geneva,Arial;
	border: 1px solid #ccc;
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 100%;
}

.Answer{
	font-size: 100%;
	letter-spacing: 0.1em;
	font-weight:bold;
}

.PartialAnswer{
	font-size: 100%;
	letter-spacing: 0.1em;
	color: #3757f7;
}

.Highlight{
	color: #000000;
	background-color: gold;
	font-weight: bold;
	font-size: 100%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em 0em 1em 0em;
	border-color: #ccc;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	text-align: center;
	border: 1px solid silver;
	margin-right:2px;

	border-left-color: #CCC;
	border-top-color: #CCC;
	border-right-color: #666;
	border-bottom-color: #666;
	color: #333333;
	background-color: #E5E5E5;


	padding: 3px 6px 3px 6px;
	cursor: pointer;

}

.FuncButtonUp {
	text-align: center;
	border: 1px solid silver;
	margin-right:2px;

	border-left-color: #CCC;
	border-top-color: #CCC;
	border-right-color: #666;
	border-bottom-color: #666;
	background-color: #999;
	color: #FFF;


	padding: 3px 6px 3px 6px;
	cursor: pointer;

/* Stan Button Shadow */	
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan Button Shadow end  Dec 4 2012*/
}

.FuncButtonDown {
	text-align: center;
	border:1px solid silver;
	margin-right:2px;

	border-left-color: #666;
	border-top-color: #666;
	border-right-color: #CCC;
	border-bottom-color: #CCC;
	background-color: #999;
	color: #FFF;


	padding: 3px 6px 3px 6px;
	cursor: pointer;

/* Stan Button Shadow Dec 4 2012 */	
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan Button Shadow end */
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	width: 810px;
	background-color: #E6E6E6;
	border: 1px solid #999;
	text-align: center;
	margin: 20px 0px 0px 0px;
	clear: both;
	font-size: 100%;

/* Stan Rounded corner of Nav Bar */	
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/* Stan Rounded corner of Nav Bar  end */
padding:1px;
}

.NavButton {
	border: 1px solid silver;
	
	border-left-color: #CCC;
	border-top-color: #CCC;
	border-right-color: #666;
	border-bottom-color: #666;
	color: #333333;
	background-color: #E5E5E5;


	cursor: pointer;	

}

.NavButtonUp {
	border:1px solid silver;

	border-left-color: #CCC;
	border-top-color: #CCC;
	border-right-color: #666;
	border-bottom-color: #666;
	background-color: #999;
	color: #FFF;

	cursor: pointer;	
/* Stan Shadow on buttons Dec 4 2012 */
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan Shadow on buttons end */
}

.NavButtonDown {
	border: 1px solid silver;

	border-left-color: #666;
	border-top-color: #666;
	border-right-color: #CCC;
	border-bottom-color: #CCC;
	background-color: #999;
	color: #FFF;

	cursor: pointer;
/* Stan Shadow on buttons Dec 4 2012 */
	-moz-box-shadow: -2px -2px 5px #888;
	-webkit-box-shadow: -2px -2px 5px #888;
	box-shadow: -2px -2px 5px #888;
/* Stan Shadow on buttons end */	
}

/*EndNavBarStyle*/

a{
	color: #0000ff;
}

a:visited{
	color: #0000cc;
}

a:hover{
	color: #0000ff;
}

div.CardStyle {
	position: absolute;
	font-family: Geneva,Arial;
	font-size: 100%;
	padding: 5px;
	border: 1px solid silver;
	color: #333333;
	background-color: #E0E0E0;
	left: -50px;
	top: -50px;
	overflow: visible;
	z-index:-1;
	
/* Stan_rounded border of cards */
	-khtml-border-radius: 5px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 5px;
	border-radius: 5px;
/* Stan_rounded border of cards END */
}

.rtl{
	text-align: right;
	font-size: 140%;
}


span.GapSpan {
	font-weight: normal;
	cursor: pointer;
	}

</style>

<script type="text/javascript">

//<![CDATA[

<!--


function Client(){
//if not a DOM browser, hopeless
	this.min = false; if (document.getElementById){this.min = true;};

	this.ua = navigator.userAgent;
	this.name = navigator.appName;
	this.ver = navigator.appVersion;  

//Get data about the browser
	this.mac = (this.ver.indexOf('Mac') != -1);
	this.win = (this.ver.indexOf('Windows') != -1);

//Look for Gecko
	this.gecko = (this.ua.indexOf('Gecko') > 1);
	if (this.gecko){
		this.geckoVer = parseInt(this.ua.substring(this.ua.indexOf('Gecko')+6, this.ua.length));
//		if (this.geckoVer < 20020000){this.min = false;}
	}
	
//Look for Firebird
	this.firebird = (this.ua.indexOf('Firebird') > 1);
	
//Look for Safari
	this.safari = (this.ua.indexOf('Safari') > 1);
	if (this.safari){
		this.gecko = false;
	}
	
//Look for IE
	this.ie = (this.ua.indexOf('MSIE') > 0);
	if (this.ie){
		this.ieVer = parseFloat(this.ua.substring(this.ua.indexOf('MSIE')+5, this.ua.length));
		if (this.ieVer < 5.5){this.min = false;}
	}
	
//Look for Opera
	this.opera = (this.ua.indexOf('Opera') > 0);
	if (this.opera){
		this.operaVer = parseFloat(this.ua.substring(this.ua.indexOf('Opera')+6, this.ua.length));
		if (this.operaVer < 7.04){this.min = false;}
	}
	if (this.min == false){
//		alert('Your browser may not be able to handle this page.');
	}
	
//Special case for the horrible ie5mac
	this.ie5mac = (this.ie&&this.mac&&(this.ieVer<6));
}

var C = new Client();

//for (prop in C){
//	alert(prop + ': ' + C[prop]);
//}



//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

//[strNavBarJS]
function NavBtnOver(Btn){
	if (Btn.className != 'NavButtonDown'){Btn.className = 'NavButtonUp';}
}

function NavBtnOut(Btn){
	Btn.className = 'NavButton';
}

function NavBtnDown(Btn){
	Btn.className = 'NavButtonDown';
}
//[/strNavBarJS]

function FuncBtnOver(Btn){
	if (Btn.className != 'FuncButtonDown'){Btn.className = 'FuncButtonUp';}
}

function FuncBtnOut(Btn){
	Btn.className = 'FuncButton';
}

function FuncBtnDown(Btn){
	Btn.className = 'FuncButtonDown';
}

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
//	RefreshImages();
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
				//get Mac FireFox to manipulate display, to force screen redraw
				if (C.mac && C.gecko) {Els[i].style.display = '';}
			}
			else{
				Els[i].style.visibility = 'hidden';
				if (C.mac && C.gecko) {Els[i].style.display = 'none';}
			}
		} 
		else {
			// tagName is either input or select (that is, Form Elements)
			// ie6 has a problem with Form elements, so manipulate those
			if (C.ie) {
				if (C.ieVer < 7) {
					if (Show == true){
						Els[i].style.visibility = 'visible';
					}
					else{
						Els[i].style.visibility = 'hidden';
					}
				}
			}
		}
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
	if (Finished == true){
		Finish();
	}
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].clientWidth;
	this.H = document.getElementsByTagName('body')[0].clientHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	if (C.ie) {
		thisKey = window.event.keyCode;
	}
	else {
		thisKey = e.keyCode;
	}

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
	}

	if (Suppress == true){
		if (C.ie){
			window.event.returnValue = false;	
			window.event.cancelBubble = true;
		}
		else{
			e.preventDefault();
		}
	}
}

if (C.ie){
	document.attachEvent('onkeydown',SuppressBackspace);
	window.attachEvent('onkeydown',SuppressBackspace);
}
else{
	if (window.addEventListener){
		window.addEventListener('keypress',SuppressBackspace,false);
	}
}

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

	RefreshImages();

}



Imgs = new Array();

function PreloadImages(){
	var a = PreloadImages.arguments;
	for (var i=0; i<a.length; i++){
		Imgs[i] = new Image();
		Imgs[i].src = a[i];
	}
}

function RefreshImages(){
	for (var i=0; i<document.images.length; i++){
		if (document.images[i].name.substring(0,6) != 'NavBar'){
			document.images[i].src = document.images[i].src;
		}
	}
}


function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}

//EXTENSION TO ARRAY OBJECT
function Array_IndexOf(Input){
	var Result = -1;
	for (var i=0; i<this.length; i++){
		if (this[i] == Input){
			Result = i;
		}
	}
	return Result;
}
Array.prototype.indexOf = Array_IndexOf;

//IE HAS RENDERING BUG WITH BOTTOM NAVBAR
function RemoveBottomNavBarForIE(){
	if ((C.ie)&&(document.getElementById('Reading') != null)){
		if (document.getElementById('BottomNavBar') != null){
			document.getElementById('TheBody').removeChild(document.getElementById('BottomNavBar'));
		}
	}
}




//HOTPOTNET-RELATED CODE

var HPNStartTime = (new Date()).getTime();
var SubmissionTimeout = 30000;
var Detail = ''; //Global that is used to submit tracking data

function Finish(){
//If there's a form, fill it out and submit it
	if (document.store != null){
		Frm = document.store;
		Frm.starttime.value = HPNStartTime;
		Frm.endtime.value = (new Date()).getTime();
		Frm.mark.value = Score;
		Frm.detail.value = Detail;
		Frm.submit();
	}
}



//JCLOZE CORE JAVASCRIPT CODE

/* Modification Copyright (c) Michael Rottmeier, March 2005 
 Find-it - Version 3.2b for Hot Potatoes v6 
 http://www.teaching-tools.de.vu 
 THIS HEADER MUST STAY UN-TOUCHED */


var Feedback = '';
var Correct = '';
var Incorrect = 'Deze informatie klopt.##Probeer nog eens.';
var AllErrorsFound = 'Je hebt alle fouten gevonden.';
var MissingMistakes = 'Aantal overblijvende fouten: ';
var CaseSensitive = false;
var Finished = false;
var Locked = false;	// timer specific
var TimeOver = false;
var Output = ''; 	// used for feedback storage


I = new Array();

I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0] = '\u0048\u0061\u0073\u0073\u0065\u006C\u0074';
I[0][1][1] = new Array();
I[0][1][1][0]='\u0047\u0065\u006E\u006B';
I[0][2]='';

I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0] = '\u0072\u006F\u0063\u006B\u006D\u0075\u007A\u0069\u0065\u006B';
I[1][1][1] = new Array();
I[1][1][1][0]='\u0070\u006F\u0070\u006D\u0075\u007A\u0069\u0065\u006B';
I[1][2]='';

I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0] = '\u006D\u0061\u0061\u0072\u0020\u0069\u006B\u0020\u007A\u006F\u0075\u0020\u0067\u0072\u0061\u0061\u0067\u0020\u0065\u0065\u006E\u0073\u0020\u0065\u0065\u006E\u0020\u006A\u0061\u0061\u0072\u0020\u0069\u006E\u0020\u0041\u006D\u0065\u0072\u0069\u006B\u0061\u0020\u0077\u006F\u006E\u0065\u006E';
I[2][1][1] = new Array();
I[2][1][1][0]='\u006D\u0061\u0061\u0072\u0020\u0069\u006B\u0020\u0068\u0065\u0062\u0020\u006F\u006F\u006B\u0020\u0061\u006C\u0020\u0069\u006E\u0020\u0041\u006D\u0065\u0072\u0069\u006B\u0061\u0020\u0067\u0065\u0077\u006F\u006F\u006E\u0064';
I[2][2]='';


function StartUp(){
	RemoveBottomNavBarForIE();	
//Keypad recovered by Stan 24 Feb 2013
//Show a keypad if there is one	(added bugfix for 6.0.4.12)
	if (document.getElementById('CharacterKeypad') != null){
		document.getElementById('CharacterKeypad').style.display = 'block';
	}
//end Keypad recovery




	PreloadImages('tom.JPG');


	Split_Feedback();
	Build_GapText();


}




// CORE JAVASCRIPT FOR JCLOZE DROPDOWN FUNCTIONALITY

GapList = new Array();
// GapList[x][0] = clue button
// GapList[x][1] = State data
// GapList[x][2] = input component in Find-it v3.1b 
var Score = 0;
var TotWrongChoices = 0;

function Create_StateArray(){
	this.ErrorFound = false;
	this.WrongGapValue = '';
	this.GapSolved = false;
	this.Guesses = new Array();
	this.HintsAndChecks = 0;
	this.Score = 0;
}

function Build_GapText(){
	var GSpan = null;
	var InpComp = null;

// first, prepare the gaps
	for (var x=0; x<I.length; x++){
		GSpan = document.getElementById('GapSpan'+x);
		if (GSpan != null){
// remove the input field
			InpComp = GSpan.removeChild(GSpan.getElementsByTagName('input')[0]);
// create the state stuff
			GapList.push(new Array(null, new Create_StateArray(), InpComp));
// put an existing clue button into the GapList array
			if (GSpan.getElementsByTagName('button').length > 0){
				GapList[x][0] = GSpan.removeChild(GSpan.getElementsByTagName('button')[0]);
				}
// remove the </input> tag - and anything else which might be in there
			while (GSpan.childNodes.length > 0){
				GSpan.removeChild(GSpan.firstChild);
				}
// add the wrong text output
			GSpan.appendChild(Create_GapContent(x));
// store the used gap value (wrong text) for tracking purposes
			GapList[x][1].WrongGapValue = GSpan.getElementsByTagName('span')[0].firstChild.nodeValue;
			}
		}

// second, prepare the other text
	var TextBody = document.getElementById('ClozeBody'); //.getElementsByTagName('p')[0];
	TextBody = TextBody.parentNode;
	if (TextBody != null){
		for (var y=0; y<TextBody.childNodes.length; y++){
// markup the text appropriately and replace the old node with the new one
			TextBody.replaceChild(Markup_Text(TextBody.childNodes[y]), TextBody.childNodes[y]);
			}
		}
}

function Create_GapContent(GapId){
	var SpanElm = document.createElement('span');
	SpanElm.className = 'GapSpan';
	SpanElm.onclick = function(){CheckText(true, GapId);}
	//SpanElm.setAttribute("onclick", 'CheckText(true, '+GapId+')');
	//SpanElm.setAttribute("class", 'GapSpan');
	SpanElm.appendChild(document.createTextNode(Get_WrongGapContent(GapId)));
	return SpanElm;
}

function Get_WrongGapContent(GapId){
	// the first alternative gap answer is considered to be the wrong one
	var ReturnVal = I[GapId][1][1][0];	
	
// remove the wrong value from the array
	for (var x=1; x<(I[GapId][1].length-1); x++){
		I[GapId][1][x][0] = I[GapId][1][x+1][0];
		}
	I[GapId][1].length = I[GapId][1].length-1;

	return ReturnVal;
}

function Markup_Text(Node){
	for (var x=0; x<Node.childNodes.length; x++){
//alert(Node.childNodes[x].nodeType);
		switch (Node.childNodes[x].nodeName.toLowerCase()){
			case 'span' : 
					if (Node.childNodes[x].attributes.length > 0){
						if ((Node.childNodes[x].getAttribute('id').substr(0, 7) != 'GapSpan')){
							Node.replaceNode(Markup_Text(Node.childNodes[x]), Node.childNodes[x]);
							}
						} 
				break;
			case 'div' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'p' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'strong' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'em' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'blockquote' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'pre' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'ul' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'ol' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'li' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'sup' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'sub' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'table' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tr' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'td' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'thead' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tbody' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tfoot' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;

			case '#text' : 
				//if (Node.childNodes.length < 1){
					//if (Node.nodeType == 3){
						if (Node.nodeValue != ''){
// add the span tag with the onclick event
							var SpanNode = document.createElement('span');
							SpanNode.className = 'GapSpan';
							SpanNode.onclick = function(){CheckText(false, -1);}
							SpanNode.appendChild(document.createTextNode(Node.childNodes[x].nodeValue));
// replace the old node with the new created node (span + text)
							Node.replaceChild(SpanNode, Node.childNodes[x]);
							}
						//}
					//}
				break;
			}
		}

	return Node;
}

// FEEDBACK ROUTINES
CFb = new Array();
FNoErrorHere = new Array();

//var strFNoErrorHere = 'FNoErrorHere.';
var strFSomeGapsAreIncorrect = 'Er zijn nog fout ingevulde tekstvakken.';
var strFWellDone = 'Goed zo!';

function Split_Feedback(){
// the feedback bits should look like feedb1## feedb2## feedb3 etc.
//'Correct' Feedback
	var Tmp = Correct.split('##');
	var y = -1;
	for (var x=0; x<Tmp.length; x++){
		if (TrimString(Tmp[x]) != ''){
			if (x == 0){
				strFSomeGapsAreIncorrect = TrimString(Tmp[x]);
				}
			if (x == 1){
				strFWellDone = TrimString(Tmp[x]);
				}
			}
		}

//'Incorrect' Feedback
	Tmp = Incorrect.split('##');
	y = -1;
	for (var x=0; x<Tmp.length; x++){
		if (TrimString(Tmp[x]) != ''){
			y++;
			FNoErrorHere[y] = TrimString(Tmp[x]);
			}
		}
}

function Get_RandomFeedback(){
	var Stuff = '';
// negative feedback
	var x = Math.floor(Math.random()*FNoErrorHere.length);
	Stuff = FNoErrorHere[x];
	return Stuff;
}


// CHECK ROUTINES
function CheckText(GapState,GapId){
	if (Finished == true){return;}

// chosen text is wrong:
	if (GapState==false){
// show feedback
		//ShowMessage(strFNoErrorHere);
		ShowMessage(Get_RandomFeedback());
// penalty
		TotWrongChoices++;
		}
// chosen text is right:
		else{
			CorrectChoice(GapId);
			document.getElementById('FeedbackDiv').style.display = 'none';
			}
}

function CorrectChoice(GapId){
// the state flag
	GapList[GapId][1].ErrorFound = true;

// show input component
	var GSpan = document.getElementById('GapSpan'+GapId);
	if (GSpan != null){
// remove the onclick event
		GSpan.removeAttribute('onclick');
// remove the text node
		while (GSpan.childNodes.length > 0){
			GSpan.removeChild(GSpan.firstChild);
			}
		GSpan.appendChild(GapList[GapId][2]);
// put the wrong gap value into the input component
		document.getElementById('Gap'+GapId).value = GapList[GapId][1].WrongGapValue;
// add the clue button if it exists
		if (GapList[GapId][0] != null){
// replace the button's caption
			GapList[GapId][0].firstChild.nodeValue = '[ ? ]';
			GSpan.appendChild(GapList[GapId][0]);
			}
		}
}

// GAP VALUE CHECK ROUTINES (mainly based on the original JCloze routines)
var CurrentWord = 0;
function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
	InTextBox = true;
}

function LeaveGap(){
	InTextBox = false;
}

function CheckAnswers(){

// check if there is at least one gap visible
	var NumOfVisibleGaps = 0;
	for (var x=0; x<GapList.length; x++){
		if ((GapList[x][1].ErrorFound == true)&&(GapList[x][1].GapSolved == false)){
			NumOfVisibleGaps++;
			}
		}

	if (NumOfVisibleGaps < 1){return;}

	if (Locked == true){return;}
	SaveCurrentAnswers();
	var AllCorrect = true;

//Check each answer
	for (var x=0; x<GapList.length; x++){
// check only those gaps which are already found
		if (GapList[x][1].ErrorFound == true){
			if (GapList[x][1].GapSolved == false){
//If it's right, calculate its score
				if (CheckAnswer(x, true) > -1){
					var TotalChars = GetGapValue(x).length;
					GapList[x][1].Score = (TotalChars-GapList[x][1].HintsAndChecks)/TotalChars;
					if (GapList[x][1].Score < 0){GapList[x][1].Score = 0;}
					GapList[x][1].GapSolved = true;
//Drop the correct answer into the page, replacing the text box
					Show_GapSolution(x);
//					SetCorrectAnswer(x, GetGapValue(x));
					}
					else{
//Otherwise, increment the checks for this item, as a penalty
						GapList[x][1].HintsAndChecks++;

//then set the flag
						AllCorrect = false;
					}
				}
			}
		}

	Output = '';
// check whether exercise is finished:
// if all errors are found, show final feedback and finish exercise:
	if (CheckExStatus() == true){
		Output += AllErrorsFound;
		Finished = true;	
// hotpot.net
		CompileGuesses();	
		CalculateScore();
		setTimeout('Finish()', SubmissionTimeout);


		}
// else show number of missing errors:
		else{
// case 1: all visible gaps are answered correctly
			if (AllCorrect == true){
				Output += strFWellDone + '<br />' + MissingMistakes + ' ' + Get_NumMissingErr();
				}
// case 2: some of the found gaps are incorrect
				else{
					Output += strFSomeGapsAreIncorrect + '<br />' + MissingMistakes + ' ' + Get_NumMissingErr();
					}
			}

// calculate the score
	CalculateScore();
// show feedback
	if (Output.length > 1){
		Output += '<br />Je score is ' + Score + '%.';
		ShowMessage(Output);
		setTimeout('', 50);
		}
}

function CheckAnswer(GapNum, MarkAnswer){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = Guess.toUpperCase();
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var x=0; x<I[GapNum][1].length; x++){
		if (CaseSensitive == false){
			UpperAnswer = I[GapNum][1][x][0].toUpperCase();
		}
		else{
			UpperAnswer = I[GapNum][1][x][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = x;
			if (MarkAnswer == true){
				GapList[GapNum][1].GapSolved = true;
			}
		}
	}
	return Match;
}

function SaveCurrentAnswers(){
	var Ans = ''
	for (var x=0; x<GapList.length; x++){
		Ans = GetGapValue(x);
		if ((Ans.length > 0)&&(Ans != GapList[x][1].Guesses[GapList[x][1].Guesses.length-1])){
			GapList[x][1].Guesses.push(Ans);
			}
		}
}

function GetGapValue(GapId){
	var RetVal = '';
	if ((GapId<0)||(GapId>=GapList.length)){return RetVal;}
	if (document.getElementById('Gap' + GapId) != null){
		RetVal = document.getElementById('Gap' + GapId).value;
		RetVal = TrimString(RetVal);
		}
		else{
			if (GapList[GapId][1].Guesses.length > 0){
				RetVal = GapList[GapId][1].Guesses[GapList[GapId][1].Guesses.length-1];
				}
			}
	return RetVal;
}

/* NOT USED
function SetCorrectAnswer(GapId, Val){
	if ((GapId<0)||(GapId>=GapList.length)){return;}
	if (document.getElementById('GapSpan' + GapId) != null){
		document.getElementById('GapSpan' + GapId).innerHTML = '<strong>'+Val+'</strong>';
		}
}*/

function CheckExStatus(){
// checks if all errors have been found or not
	var ExFin = true;
	for (var x=0; x<GapList.length; x++){
		if (GapList[x][1].GapSolved == false){
			ExFin = false;
			break;
			}
		}
	return ExFin; 
}

function Get_NumMissingErr(){
// retrieves the number of still 
// missing errors in the text
	var i = 0;
	for (var x=0; x<GapList.length; x++){
		if (GapList[x][1].ErrorFound == false){
			i++;
			}
		}
	return i;
}

function CalculateScore(){
	var TotScore = 0;
	for (var x=0; x<GapList.length; x++){
		TotScore += GapList[x][1].Score;
		}
	Score = Math.floor((TotScore * 100)/(GapList.length + TotWrongChoices));
	if (Score < 0){Score = 0;}
}

// HINT FUNCTIONALITY
function ShowHint(){
	if (Locked == true){return;}
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		GapList[CurrGap][1].HintsAndChecks++;
	}
}

function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;

//Test the current word:
//If its state is not set to already correct, check the word.
	if (GapList[CurrentWord][1].GapSolved == false){
		if (CheckAnswer(CurrentWord, false) < 0){
			return CurrentWord;
		}
	}
	
	x=CurrentWord + 1;
	while (x<I.length){
		if (GapList[x][1].GapSolved == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}

	x = 0;
	while (x<CurrentWord){
		if (GapList[x][1].GapSolved == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}
	return FoundCurrent;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum, false) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	var Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
//Add another char if the last one is a space
	if (Result.charAt(Result.length-1) == ' '){
		Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length+1);
	}
	return Result;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = Guess.toUpperCase();
		UpperAnswer = Answer.toUpperCase();
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (document.getElementById('Gap' + GNum) != null){
		document.getElementById('Gap' + GNum).value = Val;
		document.getElementById('Gap' + GNum).focus();
	}
}



function Show_GapSolution(GapId){
// show the correct solution
	var GapSpan = document.getElementById('GapSpan'+GapId);
	if (GapSpan != null){
// remove everything in the GapSpan element
		while (GapSpan.childNodes.length > 0){
			GapSpan.removeChild(GapSpan.firstChild);
			}
// append the text node
		var StrongNode = document.createElement('strong');
		StrongNode.appendChild(document.createTextNode(I[GapId][1][0][0]+' '));
		GapSpan.appendChild(StrongNode);
		}
}

function ShowClue(GapId){
	ShowMessage(I[GapId][2]);
}

function TypeChars(Chars){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}
	if (document.getElementById('Gap' + CurrGap) != null){
		SetGapValue(CurrGap, document.getElementById('Gap' + CurrGap).value + Chars);
	}
}


function ShowSolution(){
	if (Finished == true){return;}

// set the flag
	Finished = true;

// calculate the score
	CalculateScore();

// show the correct gap values
	for (var x=0; x<GapList.length; x++){
		GapList[x][1].ErrorFound = true;	
		Show_GapSolution(x);	
		}

// show feedback
	var Output = 'De oplossingen staan in het vet.' ;
// show feedback
	if (Output.length > 1){
		Output += ' Je score is '+Score+'%.';
		ShowMessage(Output);
		}
}


// HOTPOT.NET FUNCTIONALITY
function CompileGuesses(){
	var F = document.getElementById('store');
	if (F != null){
		var Temp = '<?xml version="1.0"?><hpnetresult><fields>';
		var GapLabel = '';
		for (var i=0; i<GapList.length; i++){
			GapLabel = 'Gap ' + (i+1).toString();
			Temp += '<field><fieldname>' + GapLabel + '</fieldname>';
			Temp += '<fieldtype>student-responses</fieldtype><fieldlabel>' + GapLabel + '</fieldlabel>';
			Temp += '<fieldlabelid>JClozeStudentResponses</fieldlabelid><fielddata>';
			for (var j=0; j<GapList[i][1].Guesses.length; j++){
				if (j>0){Temp += '| ';}
				Temp += GapList[i][1].Guesses[j] + ' ';	
			}	
  		Temp += '</fielddata></field>';
		}
		Temp += '</fields></hpnetresult>';
		Detail = Temp;
	}
}






//-->

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody">

<!-- BeginTopNavButtons -->



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">Luisteren: Tom stelt zich voor</h2>
	<h3 class="ExerciseSubtitle"></h3>


</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions">Luister naar Tom die zich voorstelt op de Ketnet-site: <a href="http://www.ketnet.be/kijken/ketnetband-tom-stelt-zich-voor" target="_blank">http://www.ketnet.be/kijken/ketnetband-tom-stelt-zich-voor.</a> (klik op de link)<br /><br />Welke fouten staan er in de tekst? Klik op de informatie die niet klopt. Er zijn 3 fouten.<br />Let op: je verliest punten als je op juiste informatie klikt.<br /></div>
</div>



<div id="MainDiv" class="StdDiv">

<div id="ClozeDiv">
<form id="Cloze" method="post" action="" onsubmit="return false;">
<div class="ClozeBody" id="ClozeBody">
<img src="tom.JPG" alt="tom.JPG" title="tom" width="250" height="191" style="float: left;"></img>Hallo,<br />Ik ben Tom en ik woon in <span class="GapSpan" id="GapSpan0"><input type="text" id="Gap0" onfocus="TrackFocus(0)" onblur="LeaveGap()" class="GapBox" size="7"></input></span>.<br />Ik ben 32 jaar en ik speel gitaar bij de Ketnetband. Ik hou heel veel van muziek, maar vooral van <span class="GapSpan" id="GapSpan1"><input type="text" id="Gap1" onfocus="TrackFocus(1)" onblur="LeaveGap()" class="GapBox" size="10"></input></span>.<br />Ik heb een vriendin en als we samen thuis zijn, dan kook ik graag. Ik kan heel lekkere pizza's bakken. Ik woon graag in Belgi&#x00EB;, <span class="GapSpan" id="GapSpan2"><input type="text" id="Gap2" onfocus="TrackFocus(2)" onblur="LeaveGap()" class="GapBox" size="48"></input></span>.<br />
</div>
</form>
</div>


<div class="Keypad" id="CharacterKeypad">

</div>


<button id="CheckButton2" class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="CheckAnswers()">&nbsp;Controleer&nbsp;</button>


<button class="FuncButton" onmouseover="FuncBtnOver(this)" onfocus="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onblur="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="ShowSolution()">&nbsp;Toon oplossing&nbsp;</button>


</div>



<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onfocus="FuncBtnOver(this)" onblur="FuncBtnOut(this)" onmouseover="FuncBtnOver(this)" onmouseout="FuncBtnOut(this)" onmousedown="FuncBtnDown(this)" onmouseup="FuncBtnOut(this)" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button>
</div>

<!-- BeginBottomNavButtons -->



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
